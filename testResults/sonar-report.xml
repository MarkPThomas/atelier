<?xml version="1.0" encoding="UTF-8"?>
<unitTest version="1">
    <file path="/Users/markthomas/hackreactor/atelier/tests/client/src/components/overview/sizeSelector.test.js">
        <testCase name="&lt;SizeSelector /&gt; renders without crashing given the required props" duration="14"/>
        <testCase name="&lt;SizeSelector /&gt; should have expected default properties classes" duration="8"/>
        <testCase name="&lt;SizeSelector /&gt; should execute a callback:" duration="11"/>
        <testCase name="&lt;SizeSelector /&gt; should be disabled if no quantities available" duration="3"/>
    </file>
    <file path="/Users/markthomas/hackreactor/atelier/tests/client/src/components/shared/addButton.test.js">
        <testCase name="&lt;AddButton /&gt; renders without crashing given the required props" duration="14"/>
        <testCase name="&lt;AddButton /&gt; should have a provided label, id, and pre-defined class:" duration="16"/>
        <testCase name="&lt;AddButton /&gt; should execute click event" duration="3"/>
    </file>
    <file path="/Users/markthomas/hackreactor/atelier/tests/client/src/components/overview/productInformation.test.js">
        <testCase name="&lt;ProductOverview /&gt; renders without crashing given the required props" duration="186"/>
        <testCase name="&lt;ProductOverview /&gt; should have the expected elements based on the properties provided:" duration="143"/>
        <testCase name="&lt;ProductOverview /&gt; should not have a ratings summary component if there are no reviews:" duration="42"/>
    </file>
    <file path="/Users/markthomas/hackreactor/atelier/tests/client/src/index.test.js">
        <testCase name="Test App Entry point should have a paragraph tag with &quot;Loading...&quot;:" duration="38"/>
        <testCase name="Test App Entry point renders without crashing given the required props" duration="14"/>
    </file>
    <file path="/Users/markthomas/hackreactor/atelier/tests/client/src/components/overview/productOverview.test.js">
        <testCase name="&lt;ProductOverview /&gt; renders without crashing given the required props" duration="117"/>
        <testCase name="&lt;ProductOverview /&gt; should contain loading element if data not provided:" duration="84"/>
        <testCase name="&lt;ProductOverview /&gt; should have expected content from provided properties:" duration="99"/>
        <testCase name="&lt;ProductOverview /&gt; should not have a product description if no slogan exists:" duration="10"/>
        <testCase name="&lt;ProductOverview /&gt; should not have a product description if no description exists:" duration="15"/>
        <testCase name="&lt;ProductOverview /&gt; should not have a product description if no slogan or description exists:" duration="36"/>
        <testCase name="&lt;ProductOverview /&gt; should have first style as default if none is specified:" duration="1"/>
        <testCase name="&lt;ProductOverview /&gt; should have a style set as default if specified:" duration="1"/>
        <testCase name="&lt;ProductOverview /&gt; should have average rating of 0 if no reviews:" duration="1"/>
    </file>
    <file path="/Users/markthomas/hackreactor/atelier/tests/client/src/components/overview/cart.test.js">
        <testCase name="&lt;Cart /&gt; renders without crashing given the required props" duration="218"/>
        <testCase name="&lt;Cart /&gt; should contain loading element if data not provided:" duration="75"/>
        <testCase name="&lt;Cart /&gt; should have expected content from provided properties:" duration="95"/>
        <testCase name="&lt;Cart /&gt; should not have AddButton if out of stock:" duration="20"/>
        <testCase name="&lt;Cart /&gt; should display prompt if Add Button clicked without size selection:" duration="37"/>
        <testCase name="&lt;Cart /&gt; should generate cart orders:" duration="175"/>
        <testCase name="&lt;Cart /&gt; should have quantity default to 1 if a new style is chosen:" duration="45"/>
    </file>
    <file path="/Users/markthomas/hackreactor/atelier/tests/client/src/components/overview/quantitySelector.test.js">
        <testCase name="&lt;QuantitySelector /&gt; renders without crashing given the required props" duration="171"/>
        <testCase name="&lt;QuantitySelector /&gt; should have expected default properties classes:" duration="7"/>
        <testCase name="&lt;QuantitySelector /&gt; should have quantities limited to 15:" duration="18"/>
        <testCase name="&lt;QuantitySelector /&gt; should execute a callback:" duration="4"/>
        <testCase name="&lt;QuantitySelector /&gt; should be disabled if no quantities available" duration="4"/>
        <testCase name="&lt;QuantitySelector /&gt; should reset to default upon re-render:" duration="132"/>
    </file>
    <file path="/Users/markthomas/hackreactor/atelier/tests/client/src/components/shared/starRating.test.js">
        <testCase name="&lt;StarRating /&gt; renders without crashing given the required props" duration="138"/>
        <testCase name="&lt;StarRating /&gt; should have expected default properties &amp; class:" duration="21"/>
        <testCase name="&lt;StarRating /&gt; should have a specified rating if below max:" duration="3"/>
        <testCase name="&lt;StarRating /&gt; should have a max rating if specified rating is above max:" duration="4"/>
        <testCase name="&lt;StarRating /&gt; should have a custom max rating if specified:" duration="2"/>
        <testCase name="&lt;StarRating /&gt; should have the same number of star elements as max stars:" duration="12"/>
        <testCase name="&lt;StarRating /&gt; should be clickable if given a callback:" duration="2"/>
        <testCase name="&lt;StarRating /&gt; should execute callback event" duration="7"/>
        <testCase name="&lt;StarRating /&gt; should execute onMouseOver &amp; onMouseOut events if clickable" duration="133"/>
        <testCase name="&lt;StarRating /&gt; should not execute onMouseOver or onMouseOut events if not clickable" duration="16"/>
    </file>
    <file path="/Users/markthomas/hackreactor/atelier/tests/client/src/components/qa/QA.test.js">
        <testCase name="&lt;QA testing /&gt; renders QA" duration="103"/>
        <testCase name="&lt;QA testing /&gt; should add 2 questions when click button" duration="198"/>
        <testCase name="&lt;QA testing /&gt; renders rating breakdown" duration="0"/>
        <testCase name="&lt;QA testing /&gt; renders product breakdown" duration="0"/>
    </file>
    <file path="/Users/markthomas/hackreactor/atelier/tests/client/src/components/related/outfit.test.js">
        <testCase name="Product is added to outfit when &quot;Add to Outfit&quot; card is clicked" duration="26"/>
        <testCase name="Product is removed from outfit when &quot;action&quot; button is clicked" duration="7"/>
    </file>
    <file path="/Users/markthomas/hackreactor/atelier/tests/client/src/components/ratingsReviews/ratingsAndReviews.test.js">
        <testCase name="&lt;RatingsAndReviews /&gt; renders product information" duration="0"/>
        <testCase name="&lt;RatingsAndReviews /&gt; renders review list" duration="1"/>
        <testCase name="&lt;RatingsAndReviews /&gt; renders rating breakdown" duration="0"/>
        <testCase name="&lt;RatingsAndReviews /&gt; renders product breakdown" duration="0"/>
    </file>
    <file path="/Users/markthomas/hackreactor/atelier/tests/client/src/components/overview/ratingsSummary.test.js">
        <testCase name="&lt;RatingsSummary /&gt; renders without crashing given the required props" duration="5"/>
        <testCase name="&lt;RatingsSummary /&gt; should have text with the review count shown:" duration="6"/>
        <testCase name="&lt;RatingsSummary /&gt; should have a star rating component with the average rating supplied:" duration="115"/>
        <testCase name="&lt;RatingsSummary /&gt; should execute an onclick event on read-all-reviews:" duration="4"/>
    </file>
    <file path="/Users/markthomas/hackreactor/atelier/tests/client/src/components/overview/styleSelector.test.js">
        <testCase name="&lt;StyleSelector /&gt; renders without crashing given the required props" duration="10"/>
        <testCase name="&lt;StyleSelector /&gt; should have expected default properties classes:" duration="12"/>
        <testCase name="&lt;StyleSelector /&gt; should have expected default properties classes:" duration="14"/>
        <testCase name="&lt;StyleSelector /&gt; should execute a callback:" duration="4"/>
    </file>
    <file path="/Users/markthomas/hackreactor/atelier/tests/client/src/components/overview/price.test.js">
        <testCase name="&lt;Price /&gt; renders without crashing given the required props" duration="4"/>
        <testCase name="&lt;Price /&gt; should have expected default properties classes:" duration="3"/>
        <testCase name="&lt;Price /&gt; should have expected sale price classes:" duration="11"/>
    </file>
    <file path="/Users/markthomas/hackreactor/atelier/tests/client/src/components/overview/productDescription.test.js">
        <testCase name="&lt;ProductDescription /&gt; renders without crashing given the required props" duration="1"/>
        <testCase name="&lt;ProductDescription /&gt; should have expected content from provided properties:" duration="3"/>
    </file>
    <file path="/Users/markthomas/hackreactor/atelier/tests/client/src/model/Calcs.test.js">
        <testCase name="Test roundByIncrement should should equal a matching empty increment" duration="0"/>
        <testCase name="Test roundByIncrement should should equal a matching quarter increment" duration="0"/>
        <testCase name="Test roundByIncrement should should equal a matching half increment" duration="0"/>
        <testCase name="Test roundByIncrement should should equal a matching three-quarter increment" duration="1"/>
        <testCase name="Test roundByIncrement should should equal a matching empty increment from whole number" duration="0"/>
        <testCase name="Test roundByIncrement should should equal a matching quarter increment rounding down" duration="0"/>
        <testCase name="Test roundByIncrement should should equal a matching quarter increment rounding up from half" duration="1"/>
        <testCase name="Test roundByIncrement should should equal a matching quarter increment rounding up" duration="0"/>
        <testCase name="Test roundByIncrement should should equal a matching quarter increment rounding down" duration="0"/>
        <testCase name="Test roundByIncrement should should equal a matching quarter increment rounding up from half" duration="1"/>
        <testCase name="Test roundByIncrement should should equal a matching quarter increment rounding up" duration="0"/>
        <testCase name="Test roundByIncrement should should equal a matching quarter increment rounding down" duration="0"/>
        <testCase name="Test roundByIncrement should should equal a matching quarter increment rounding up from half" duration="0"/>
        <testCase name="Test roundByIncrement should should equal a matching quarter increment rounding up" duration="1"/>
        <testCase name="Test roundByIncrement should should equal a matching quarter increment rounding down" duration="0"/>
        <testCase name="Test roundByIncrement should should equal a matching quarter increment rounding up from half" duration="0"/>
        <testCase name="Test roundByIncrement should should equal a matching quarter increment rounding up" duration="0"/>
        <testCase name="Test roundByIncrement should should equal a -1 for an invalid number" duration="0"/>
    </file>
</unitTest>